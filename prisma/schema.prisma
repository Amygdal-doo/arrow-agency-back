// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum EfficiencyLevel {
//   null
//   beginner
//   intermediate
//   advanced
//   expert
// }

enum Role {
  USER
  SUPER_ADMIN
}

model User {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String @db.VarChar(256)
  lastName  String @db.VarChar(256)
  email     String @unique(map: "user_email_unique") @db.VarChar(256)
  password  String

  role         Role          @default(USER)
  refreshToken RefreshToken?
  profile      Profile?
  applicants   Applicant[]
  files        File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "user_Email_Index")
  @@index([id], map: "user_Id_Index")
}

model Profile {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNumber String? @db.VarChar(50)
  address     String? // Address of the customer
  // companyName String
  // companyUrl  String?
  // companyLogo String

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // language String
  // currency String
  @@index([userId], map: "user_Id_profile_Index")
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "refreshtoken_User_Id_Index")
}

model Applicant {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName    String   @db.VarChar(256)
  lastName     String   @db.VarChar(256)
  email        String
  phone        String?
  technologies String[]

  cvId   String @unique @db.Uuid
  userId String @db.Uuid

  user User   @relation(fields: [userId], references: [id])
  cv   Cv     @relation(fields: [cvId], references: [id])
  file File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "applicant_Email_Index")
  @@index([id], map: "applicant_Id_Index")
}

model File {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url           String
  name          String
  extension     String
  fileCreatedAt DateTime

  userId      String @db.Uuid
  applicantId String @db.Uuid // Remove @unique so an applicant can have multiple files

  user      User      @relation(fields: [userId], references: [id])
  applicant Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id], map: "file_Id_Index")
}

model Cv {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String
  summary   String
  skills    Skills[]
  hobbies   String[] @default([])

  experience   Experience[]
  projects     Project[]
  educations   Education[]
  certificates Certificate[]
  languages    CvLanguage[]
  courses      Course[]
  socials      Social[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicant Applicant?

  @@index([id], map: "cv_Id_Index")
}

model Skills {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  efficiency String @default("null")

  cvId String @db.Uuid
  cv   Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "skills_CvData_Id_Index")
}

model Experience {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  position    String
  company     String
  startDate   String
  endDate     String?
  description String
  cvId        String  @db.Uuid
  cv          Cv      @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "experience_Cv_Id_Index")
}

model Project {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  startDate   String
  endDate     String?
  url         String?

  cvId String @db.Uuid
  cv   Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "project_Cv_Id_Index")
}

model Education {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  institution String
  degree      String
  field       String
  startDate   String
  endDate     String?

  cvId String @db.Uuid
  cv   Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "education_Cv_Id_Index")
}

model Certificate {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  issuer         String
  issueDate      String
  expirationDate String?
  url            String?

  cvId String @db.Uuid
  cv   Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "certificate_Cv_Id_Index")
}

model Course {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  startDate String
  endDate   String?

  cvId String @db.Uuid
  cv   Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "course_Cv_Id_Index")
}

model Social {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  url  String

  cvId String @db.Uuid
  cv   Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "social_Cv_Id_Index")
}

model CvLanguage {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  efficiency String

  cvId String @db.Uuid
  cv   Cv     @relation(fields: [cvId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "experience_CvData_Id_Index")
}
