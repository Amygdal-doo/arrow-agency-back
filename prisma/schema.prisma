// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum EfficiencyLevel {
//   null
//   beginner
//   intermediate
//   advanced
//   expert
// }

enum SUBSCRIPTION_PERIOD {
  day
  week
  month
  half_year
  year
}

enum SUBSCRIPTION_STATUS {
  ACTIVE
  PAST_DUE
  CANCELED
  PENDING
}

enum PaymentType {
  ONE_TIME
  SUBSCRIPTION
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  // APPROVED
  // CANCELLED
  REFUNDED
}

enum MonriCurrency {
  USD
  EUR
  BAM
  HRK
}

enum CreatedBy {
  LOGGED_USER
  NOT_LOGGED
}

enum JobExperienceLevel {
  JUNIOR
  MEDIOR
  SENIOR
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
  TEMPORARY
  SEASONAL
}

enum Role {
  USER
  HR
  SUPER_ADMIN
}

enum ApplicationType {
  EMAIL
  LINK
}

enum JobStatus {
  DRAFT
  PUBLISHED
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName     String         @db.VarChar(256)
  lastName      String         @db.VarChar(256)
  email         String         @unique(map: "user_email_unique") @db.VarChar(256)
  password      String
  role          Role           @default(USER)
  refreshToken  RefreshToken?
  profile       Profile?
  applicants    Applicant[]
  files         File[]
  organizations Organization[]
  jobs          Job[]
  pan_tokens    String[]
  customer      Customer?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "user_Email_Index")
  @@index([id], map: "user_Id_Index")
}

model Profile {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNumber  String? @db.VarChar(50)
  address      String? // Address of the customer
  companyLogos File[]  @relation(name: "companyLogos")
  userId       String  @unique @db.Uuid
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_Id_profile_Index")
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "refreshtoken_User_Id_Index")
}

model Applicant {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName    String   @db.VarChar(256)
  lastName     String   @db.VarChar(256)
  email        String
  phone        String?
  technologies String[]
  templateId   String
  publicCv     Boolean  @default(false)
  cvId         String   @unique @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  cv           Cv       @relation(fields: [cvId], references: [id])
  file         File?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email], map: "applicant_Email_Index")
  @@index([id], map: "applicant_Id_Index")
}

model File {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url            String
  name           String
  extension      String
  height         Int?
  width          Int?
  fileCreatedAt  DateTime
  userId         String?       @db.Uuid
  profileId      String?       @db.Uuid
  applicantId    String?       @unique @db.Uuid
  cvId           String?       @unique @db.Uuid
  organizationId String?       @unique @db.Uuid
  jobId          String?       @unique @db.Uuid
  user           User?         @relation(fields: [userId], references: [id])
  applicant      Applicant?    @relation(fields: [applicantId], references: [id])
  profile        Profile?      @relation(fields: [profileId], references: [id], onDelete: Cascade, name: "companyLogos")
  cv             Cv?           @relation(fields: [cvId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([id], map: "file_Id_Index")
}

model Cv {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName        String
  lastName         String
  email            String
  phone            String
  summary          String
  primaryColor     String
  secondaryColor   String
  tertiaryColor    String
  showPersonalInfo Boolean       @default(false)
  showCompanyInfo  Boolean       @default(false)
  companyName      String
  companyLogo      File?
  hobbies          String[]      @default([])
  skills           Skills[]
  experience       Experience[]
  projects         Project[]
  educations       Education[]
  certificates     Certificate[]
  languages        CvLanguage[]
  courses          Course[]
  socials          Social[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  applicant        Applicant?

  @@index([id], map: "cv_Id_Index")
}

model Skills {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  efficiency String   @default("null")
  cvId       String   @db.Uuid
  cv         Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([cvId], map: "skills_CvData_Id_Index")
}

model Experience {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  position    String
  company     String
  startDate   String?
  endDate     String?
  description String
  cvId        String   @db.Uuid
  cv          Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([cvId], map: "experience_Cv_Id_Index")
}

model Project {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  startDate   String?
  endDate     String?
  url         String?
  cvId        String   @db.Uuid
  cv          Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([cvId], map: "project_Cv_Id_Index")
}

model Education {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  institution String
  degree      String
  field       String
  startDate   String?
  endDate     String?
  cvId        String   @db.Uuid
  cv          Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([cvId], map: "education_Cv_Id_Index")
}

model Certificate {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  issuer         String
  issueDate      String
  expirationDate String?
  url            String?
  cvId           String   @db.Uuid
  cv             Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([cvId], map: "certificate_Cv_Id_Index")
}

model Course {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  startDate String?
  endDate   String?
  cvId      String   @db.Uuid
  cv        Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "course_Cv_Id_Index")
}

model Social {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  cvId      String   @db.Uuid
  cv        Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cvId], map: "social_Cv_Id_Index")
}

model CvLanguage {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  efficiency String
  cvId       String   @db.Uuid
  cv         Cv       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([cvId], map: "experience_CvData_Id_Index")
}

model JobCategory {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // code        String?  @unique @db.VarChar(10)
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Organization {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  logo      File?
  name      String    @unique @db.VarChar(100)
  about     String    @db.Text
  culture   String?   @db.Text
  benefits  String?   @db.Text
  email     String    @db.VarChar(150)
  location  String    @db.VarChar(100)
  verified  Boolean   @default(false)
  createdBy CreatedBy
  status    JobStatus @default(DRAFT)
  userId    String?   @db.Uuid
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs      Job[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Job {
  id                     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  worldwide              Boolean
  remote                 Boolean
  experienceRequired     JobExperienceLevel?
  payment                Payment?            @relation("jobPayments")
  name                   String              @db.VarChar(100)
  description            String?             @db.Text
  salary                 String?             @db.VarChar(100)
  applyBeforeDate        DateTime
  noOfVacancies          Int?
  applicationLinkOrEmail String
  typeOfApplication      ApplicationType
  status                 JobStatus           @default(DRAFT)
  createdBy              CreatedBy
  jobCategoryId          String              @db.Uuid
  userId                 String?             @db.Uuid
  organizationId         String              @db.Uuid
  user                   User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobType                JobType
  jobSkills              JobSkill[]
  jobCategory            JobCategory         @relation(fields: [jobCategoryId], references: [id])
  organization           Organization        @relation(fields: [organizationId], references: [id])
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
}

model Skill {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @unique @db.VarChar(100)
  description String?    @db.Text
  jobSkills   JobSkill[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model JobSkill {
  jobId   String @db.Uuid
  skillId String @db.Uuid
  job     Job    @relation(fields: [jobId], references: [id])
  skill   Skill  @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
}

model SubscriptionPlan {
  id            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String              @unique @db.VarChar(255)
  description   String              @db.Text
  price         Decimal             @db.Money // int
  currency      MonriCurrency
  features      Json? // Store features like job posting limits
  subscriptions Subscription[]
  // mostPopular   Boolean
  period        SUBSCRIPTION_PERIOD @default(month)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Subscription {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // organizationId      String           @db.Uuid
  planId              String              @db.Uuid
  status              SUBSCRIPTION_STATUS // e.g., "active", "canceled", "past_due"
  startDate           DateTime
  nextBillingDate     DateTime?
  monriSubscriptionId String? // Monri's subscription identifier
  customerId          String              @db.Uuid
  customer            Customer            @relation(fields: [customerId], references: [id])
  panToken            String
  cITId               String?
  ammount             Decimal             @db.Money
  // organization        Organization  @relation(fields: [organizationId], references: [id])
  plan                SubscriptionPlan    @relation(fields: [planId], references: [id])
  payments            Payment[]           @relation("subscriptionPayments")
  // jobs                Job[]         @relation("jobSubscription")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// Transaction
model Payment {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount              Decimal       @db.Money
  paymentType         PaymentType // Distinguish between one-time and subscription
  currency            MonriCurrency
  status              PaymentStatus @default(PENDING)
  monriTransactionId  Int?
  transactionResponse Json? // Store Monri's transaction response
  jobId               String?       @unique @db.Uuid // Removed unique constraint, made optional
  subscriptionId      String?       @db.Uuid // Added for subscription payments
  packageId           String?       @db.Uuid
  customerId          String        @db.Uuid
  job                 Job?          @relation("jobPayments", fields: [jobId], references: [id])
  subscription        Subscription? @relation("subscriptionPayments", fields: [subscriptionId], references: [id])
  package             Package?      @relation("packagePayments", fields: [packageId], references: [id])
  customer            Customer      @relation("customerPayments", fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @unique @db.VarChar(100)
  price       Decimal       @db.Money
  currency    MonriCurrency
  description String?       @db.Text
  payments    Payment[]     @relation("packagePayments")
  // features   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String //@unique 
  fullName      String
  address       String
  city          String
  zip           String
  country       String
  phone         String
  cITId         String? 
  userId        String?        @unique @db.Uuid
  user          User?          @relation(fields: [userId], references: [id])
  subscriptions Subscription[]
  payments      Payment[]      @relation("customerPayments")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId], map: "customer_User_Id_Index")
}

// model Subscription { 
//   id Int @id @default(autoincrement()) 
//   customerId Int @db.Uuid
//   customer Customer @relation(fields: [customerId], references: [id]) 
//   panToken String 
//   amount Int 
//   currency String @default("BAM") 
//   status String @default("active") // active, canceled 
//   createdAt DateTime @default(now()) 
//   updatedAt DateTime @updatedAt 
//   transactions Transaction[] 
//   }

// model Transaction { 
//   id Int @id @default(autoincrement()) 
//   subscriptionId String  
//   subscription Subscription @relation(fields: [subscriptionId], references: [id]) 
//   customerId String 
//   customer Customer @relation(fields: [customerId], references: [id]) 
//   orderNumber String @unique 
//   status String // approved, declined, invalid 
//   amount Int 
//   currency String 
//   createdAt DateTime @default(now()) 
//   }
