// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPER_ADMIN
}

model User {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName String @db.VarChar(256)
  lastName  String @db.VarChar(256)
  email     String @unique(map: "user_email_unique") @db.VarChar(256)
  password  String

  role         Role          @default(USER)
  refreshToken RefreshToken?
  applicants   Applicant[]
  files        File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "user_Email_Index")
  @@index([id], map: "user_Id_Index")
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "refreshtoken_User_Id_Index")
}

model Applicant {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName    String   @db.VarChar(256)
  lastName     String   @db.VarChar(256)
  email        String
  phone        String?
  technologies String[]
  cvData       Json
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  file         File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "applicant_Email_Index")
  @@index([id], map: "applicant_Id_Index")
}

model File {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url           String
  name          String
  extension     String
  fileCreatedAt DateTime
  userId        String    @db.Uuid
  user          User      @relation(fields: [userId], references: [id])
  applicantId   String   @db.Uuid // Remove @unique so an applicant can have multiple files
  applicant     Applicant @relation(fields: [applicantId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id], map: "file_Id_Index")
}
